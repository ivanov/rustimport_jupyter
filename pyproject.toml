[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "rustimport_jupyter"
dynamic = ["version"]
description = "Jupyter and iPython magic for compiling Python extensions written in Rust"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Thomas J. Fan", email = "thomasjpfan@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["ipython", "rustimport"]

[project.urls]
Source = "https://github.com/thomasjpfan/rustimport_jupyter"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/rustimport_jupyter/_version.py"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest"]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.lint]
dependencies = ["mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
style = ["ruff ."]
fmt = ["ruff format {args:.}", "ruff --fix {args:.}"]

[tool.hatch.envs.test]
dependencies = ["pytest"]
[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.12"]
[tool.hatch.envs.test.scripts]
all = "pytest {args:tests}"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Implicitly concatenated string literals on one line
  "ISC001",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["rustimport_jupyter"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101"]

[tool.coverage.run]
source_pkgs = ["rustimport_jupyter", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
rustimport_jupyter = [
  "src/rustimport_jupyter",
  "*/rustimport_jupyter/src/rustimport_jupyter",
]
tests = ["tests", "*/rustimport_jupyter/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
